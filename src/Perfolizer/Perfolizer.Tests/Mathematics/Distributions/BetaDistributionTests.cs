using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using Perfolizer.Mathematics.Distributions;
using Perfolizer.Tests.Common;
using Xunit;
using Xunit.Abstractions;

namespace Perfolizer.Tests.Mathematics.Distributions
{
    public class BetaDistributionTests
    {
        private readonly ITestOutputHelper output;

        public BetaDistributionTests(ITestOutputHelper output)
        {
            this.output = output;
        }

        private class TestData
        {
            public double Alpha { get; }
            public double Beta { get; }
            public double[] ExpectedCdf { get; }
            public double[] ExpectedPdf { get; }
            public double[] ExpectedQuantile { get; }

            public TestData(double alpha, double beta, double[] expectedCdf, double[] expectedPdf, double[] expectedQuantile)
            {
                Alpha = alpha;
                Beta = beta;
                ExpectedCdf = expectedCdf;
                ExpectedPdf = expectedPdf;
                ExpectedQuantile = expectedQuantile;
            }
        }

        private static readonly IDictionary<string, TestData> TestDataMap = new Dictionary<string, TestData>
        {
            {
                "1/1", new TestData(1, 1, new[]
                    {
                        0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1
                    },
                    new[]
                    {
                        1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    },
                    new[]
                    {
                        0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 
                        0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1
                    }
                )
            },
            {
                "1/2", new TestData(1, 2, new[]
                    {
                        0, 0.0975, 0.19, 0.2775, 0.36, 0.4375, 0.51, 0.5775, 0.64, 0.6975, 0.75, 0.7975, 0.84, 0.8775, 0.91, 0.9375, 0.96,
                        0.9775, 0.99, 0.9975, 1
                    },
                    new[]
                    {
                        2, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1, 0.9, 0.8,
                        0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0
                    },
                    new[]
                    {
                        0, 0.0253205655191036, 0.0513167019494862, 0.0780455542707113, 
                        0.105572809000084, 0.133974596215561, 0.163339973465925, 0.193774225170145, 
                        0.225403330758517, 0.258380151290434, 0.292893218813452, 0.329179606750063, 
                        0.367544467966324, 0.408392021690038, 0.452277442494834, 0.5, 
                        0.552786404500042, 0.612701665379258, 0.683772233983162, 0.776393202250021, 
                        1
                    }
                )
            },
            {
                "1/9", new TestData(1, 9, new[]
                    {
                        0, 0.369750590275391, 0.612579511, 0.768383053716797, 0.865782272,
                        0.924915313720703, 0.959646393, 0.979288087162109, 0.989922304,
                        0.995394633416016, 0.998046875, 0.999243319357422, 0.999737856,
                        0.999921184361328, 0.999980317, 0.999996185302734, 0.999999488,
                        0.999999961556641, 0.999999999, 0.999999999998047, 1
                    },
                    new[]
                    {
                        9, 5.97078388160156, 3.87420489, 2.45241472535156, 1.50994944,
                        0.901016235351563, 0.51883209, 0.286780331601563, 0.15116544,
                        0.0753605441015625, 0.03515625, 0.0151336128515625, 0.00589823999999999,
                        0.0020266878515625, 0.00059049, 0.0001373291015625, 2.304e-05,
                        2.30660156249999e-06, 8.99999999999997e-08, 3.51562499999996e-10,
                        0
                    },
                    new[]
                    {
                        0, 0.00568304498804804, 0.0116384668842518, 0.0178955962681417, 
                        0.0244888880209235, 0.0314592045472769, 0.0388555309633384, 0.0467373104519637, 
                        0.0551776916308148, 0.0642681545152167, 0.0741252877127095, 0.0849010498906314, 
                        0.0967989298633178, 0.110100641264161, 0.125212917076067, 0.142756017146927, 
                        0.163748969049627, 0.190056761285166, 0.225736317318873, 0.283128835563114, 
                        1
                    }
                )
            },
            {
                "2/3", new TestData(2, 3, new[]
                    {
                        0, 0.01401875, 0.0523, 0.10951875, 0.1808, 0.26171875, 0.3483,
                        0.43701875, 0.5248, 0.60901875, 0.6875, 0.75851875, 0.8208, 0.87351875,
                        0.9163, 0.94921875, 0.9728, 0.98801875, 0.9963, 0.99951875, 1
                    },
                    new[]
                    {
                        0, 0.5415, 0.972, 1.3005, 1.536, 1.6875, 1.764, 1.7745, 1.728,
                        1.6335, 1.5, 1.3365, 1.152, 0.9555, 0.756, 0.5625, 0.384, 0.2295,
                        0.108, 0.0284999999999999, 0
                    },
                    new[]
                    {
                        0, 0.0976114628864144, 0.142559316710031, 0.179384364512524, 
                        0.212317128277951, 0.243022083756076, 0.272383942075105, 0.300963500018949, 
                        0.329166503378408, 0.35732216844687, 0.38572756813239, 0.414678888948388, 
                        0.444500002083767, 0.475576376376395, 0.508404754872585, 0.54367828541908, 
                        0.582453574524333, 0.626532161502465, 0.679539416278182, 0.751395374269819, 
                        1
                    }
                )
            },
            {
                "3/4", new TestData(3, 4, new[]
                    {
                        0, 0.00222984375, 0.01585, 0.04733859375, 0.0988800000000001,
                        0.16943359375, 0.25569, 0.35291484375, 0.45568, 0.55848234375,
                        0.65625, 0.74473609375, 0.8208, 0.88257609375, 0.92953, 0.96240234375,
                        0.98304, 0.99411484375, 0.99873, 0.99991359375, 1
                    },
                    new[]
                    {
                        0, 0.12860625, 0.4374, 0.82906875, 1.2288, 1.58203125, 1.8522,
                        2.01849375, 2.0736, 2.02145625, 1.875, 1.65391875, 1.3824, 1.08688125,
                        0.7938, 0.52734375, 0.3072, 0.14630625, 0.0485999999999999, 0.00676874999999997,
                        0
                    },
                    new[]
                    {
                        0, 0.153161117975223, 0.200908878856905, 0.237391107567934, 
                        0.268649154220668, 0.296916548307257, 0.323323884628771, 0.348554772442512, 
                        0.373079731905029, 0.397260731019253, 0.421407190690713, 0.445812470656575, 
                        0.470784219077961, 0.49667760668178, 0.52394180120125, 0.553198251743959, 
                        0.585394235302173, 0.622156429627245, 0.666805613472185, 0.728661627480248, 
                        1
                    }
                )
            },
            {
                "3/9", new TestData(3, 9, new[]
                    {
                        0, 0.0152352973052979, 0.0895618508500001, 0.22118801812273,
                        0.3825984512, 0.544799089431763, 0.68725954575, 0.799871142203882,
                        0.8810831872, 0.934776495754321, 0.96728515625, 0.985197434929565,
                        0.9940755456, 0.997961630544849, 0.99942230395, 0.999873876571655,
                        0.999981056, 0.99999841757522, 0.99999995445, 0.999999999902026, 1
                    },
                    new[]
                    {
                        0, 0.820982783720215, 2.1308126895, 3.03486322262256, 3.321888768,
                        3.097243309021, 2.5682188455, 1.93218248416553, 1.330255872,
                        0.839328059931152, 0.4833984375, 0.251785483817871, 0.116785152,
                        0.0470951589506836, 0.0159137055, 0.00424861907958985, 0.000811007999999999,
                        9.16585795898435e-05, 4.0095e-06, 1.74506835937498e-08, 0
                    },
                    new[]
                    {
                        0, 0.078820045666029, 0.104773672190198, 0.125112029674007, 
                        0.142915019091741, 0.159334269376563, 0.174964351232075, 0.190176719523054, 
                        0.205239933991091, 0.220374762150518, 0.235785526635828, 0.25168301392893, 
                        0.268306798575544, 0.285953600716725, 0.305021162660516, 0.326086698472659, 
                        0.350066704951152, 0.378596528928017, 0.415156931725909, 0.470086799279176, 
                        1
                    }
                )
            },
            {
                "7/9", new TestData(7, 9, new[]
                    {
                        0, 3.51819989673472e-06, 0.000310630537603001, 0.00360558584527071,
                        0.018058806984704, 0.0566203100606799, 0.131142573383121, 0.245157531759255,
                        0.390186844291072, 0.547839597959584, 0.696380615234375, 0.818239534961649,
                        0.904952591843328, 0.957806162061808, 0.984757474230229, 0.995806985534728,
                        0.999215014608896, 0.999919095375415, 0.999997153517547, 0.999999992581744, 1
                    },
                    new[]
                    {
                        0, 0.000466933958240873, 0.01939039547445, 0.139812355087193,
                        0.4836670046208, 1.10097320750356, 1.89303411101805, 2.63852801967382,
                        3.0989640794112, 3.13201035943722, 2.74932861328125, 2.09663503400342,
                        1.3773173686272, 0.765016999787082, 0.34770014284005, 0.122330356389284,
                        0.0302291877888, 0.00435401797849387, 0.00023938759845, 1.29344586770323e-06, 0
                    },
                    new[]
                    {
                        0, 0.243727415766549, 0.282184195881493, 0.309570697922153, 
                        0.332068042749622, 0.351827265099734, 0.369891193466562, 0.38686719820471, 
                        0.403158578223747, 0.41906470516084, 0.434832786077504, 0.450690072851157, 
                        0.466869242318304, 0.483634930775566, 0.501319961170241, 0.520386157849728, 
                        0.541544700317781, 0.566037857990933, 0.596466831429147, 0.640434789782346, 
                        1
                    }
                )
            },
            {
                "20/30", new TestData(20, 30, new[]
                    {
                        0, 6.56738006947342e-14, 1.56945459993621e-08, 1.1078466689654e-05,
                        0.00068772762874159, 0.0108557281062408, 0.0699870933005074,
                        0.238560163534381, 0.507700199657648, 0.767111393213431, 0.923796114019261,
                        0.983626775463556, 0.997831590079582, 0.99983815136103, 0.999994056247415,
                        0.999999913551269, 0.999999999656384, 0.999999999999815, 1, 1, 1
                    },
                    new[]
                    {
                        0, 2.43717134053633e-11, 2.66381586082663e-06, 0.00112552253422986,
                        0.0458829113774127, 0.489900891587174, 2.11650075047403, 4.61584920058459,
                        5.7279276414762, 4.30553559273675, 2.00923916412251, 0.578795874056284,
                        0.0993310285503837, 0.00945798212931074, 0.000442436118765012,
                        8.29651461645712e-06, 4.37573541425827e-08, 3.29668557573192e-11,
                        7.63974927747943e-16, 3.97511825522234e-24, 0
                    },
                    new[]
                    {
                        0, 0.289362088709132, 0.312428232994195, 0.328380790743978, 
                        0.341263858010135, 0.352449692368155, 0.362592262050654, 0.37206722918252, 
                        0.381121048648054, 0.389934717333661, 0.398656346263224, 0.407421187050897, 
                        0.416367234967443, 0.425651429840791, 0.435471768245276, 0.44610459661892, 
                        0.457978972702409, 0.471852446831124, 0.489334270444789, 0.515233389997358, 
                        1
                    }
                )
            },
            {
                "100/200", new TestData(100, 200, new[]
                    {
                        0, 6.57083740806873e-91, 1.43861799878687e-62, 9.30307912108281e-47,
                        4.2358741961308e-36, 2.77899816370087e-28, 2.80568701979187e-22,
                        1.53954987363643e-17, 9.73857901023567e-14, 1.15221521461999e-10,
                        3.54600736656723e-08, 3.5909419276845e-06, 0.000142424760368366,
                        0.00252993220342043, 0.0224244247310462, 0.10884306564491, 0.315878806513032,
                        0.60162293459243, 0.836589797625881, 0.954696094562049, 0.991684464926086,
                        0.999000087730313, 0.999921762637511, 0.999996042019178, 0.999999871550767,
                        0.999999997353445, 0.999999999965849, 0.999999999999729, 0.999999999999999,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    },
                    new[]
                    {
                        0, 1.61379130693678e-50, 2.17309577977564e-25, 6.76426095410506e-13,
                        9.11373658731348e-06, 0.0946393531867753, 7.11760151572958, 11.8936143543286,
                        0.792241261860708, 0.00277353444020577, 5.44353202275918e-07,
                        5.34584042988294e-12, 1.9486397266548e-18, 1.55161019071048e-26,
                        1.13410989748092e-36, 1.83631123554542e-49, 5.67149220212515e-66,
                        3.14379115515975e-88, 8.18140561411136e-121, 2.15024168254307e-178, 0
                    },
                    new[]
                    {
                        0, 0.289271425997272, 0.298720365462686, 0.30516302648595, 
                        0.310320906215277, 0.314771616332751, 0.31878823339371, 0.322526527813509, 
                        0.326087989549531, 0.329546616011883, 0.332962506648486, 0.336390144262737, 
                        0.339884769324051, 0.343508920811833, 0.34734129904893, 0.351491678782061, 
                        0.356130668378756, 0.361560231617217, 0.368424405401155, 0.378660758709807, 
                        1
                    }
                )
            }
        };

        [UsedImplicitly]
        public static TheoryData<string> TestDataKeys = TheoryDataHelper.Create(TestDataMap.Keys);

        /// <summary>
        /// Base method for Cdf and Pdf tests
        /// </summary>
        private void Beta(double a, double b, [NotNull] double[] expected, Func<BetaDistribution, double, double> getValue)
        {
            var distribution = new BetaDistribution(a, b);
            var comparer = new AbsoluteEqualityComparer(1e-2);
            int n = expected.Length - 1;

            double maxDelta = 0;
            for (int i = 0; i < expected.Length; i++)
            {
                double x = i * 1.0 / n;
                double actual = getValue(distribution, x);
                output.WriteLine($"x = {x}");
                output.WriteLine($"Actual   = {actual}");
                output.WriteLine($"Expected = {expected[i]}");

                maxDelta = Math.Max(maxDelta, Math.Abs(actual - expected[i]));
                Assert.Equal(expected[i], actual, comparer);
            }
            output.WriteLine("-----");
            output.WriteLine($"MaxDelta = {maxDelta}");
        }

        [Theory]
        [MemberData(nameof(TestDataKeys))]
        private void BetaCdf([NotNull] string testDataKey)
        {
            var testData = TestDataMap[testDataKey];
            Beta(testData.Alpha, testData.Beta, testData.ExpectedCdf, (d, x) => d.Cdf(x));
        }

        [Theory]
        [MemberData(nameof(TestDataKeys))]
        private void BetaPdf([NotNull] string testDataKey)
        {
            var testData = TestDataMap[testDataKey];
            Beta(testData.Alpha, testData.Beta, testData.ExpectedPdf, (d, x) => d.Pdf(x));
        }
        
        [Theory]
        [MemberData(nameof(TestDataKeys))]
        private void BetaQuantile([NotNull] string testDataKey)
        {
            var testData = TestDataMap[testDataKey];
            Beta(testData.Alpha, testData.Beta, testData.ExpectedQuantile, (d, x) => d.Quantile(x));
        }
    }
}