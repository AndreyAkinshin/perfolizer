using Perfolizer.Common;
using Perfolizer.Mathematics.QuantileEstimators;

namespace Perfolizer.Mathematics.DispersionEstimators
{
    public class HarrellDavisNormalizedMedianAbsoluteDeviationEstimator : MedianAbsoluteDeviationEstimatorBase
    {
        public static readonly IMedianAbsoluteDeviationEstimator Instance = new HarrellDavisNormalizedMedianAbsoluteDeviationEstimator();

        public override IQuantileEstimator QuantileEstimator => HarrellDavisQuantileEstimator.Instance;

        /// <summary>
        /// See https://aakinshin.net/posts/unbiased-mad-hd/
        /// </summary>
        private static readonly double[] InverseFactors =
        {
            double.NaN, double.NaN, 0.5641745553088423, 0.637689464277234, 0.6266114358022791, 0.6385252621371729, 0.6383396054837751,
            0.6391483024649844, 0.6414054128515725, 0.6423654653358132, 0.6439650633303657, 0.6453466713309995, 0.6466167720829089,
            0.647896194684998, 0.6490803621640332, 0.6501815281116196, 0.6512459087349248, 0.6522589758796201, 0.653165439546788,
            0.6540376403452666, 0.6548870130335538, 0.6556512800977367, 0.656379724662582, 0.657075137823794, 0.6577094288730985,
            0.6583179057553981, 0.6588811618092122, 0.6594277977978977, 0.659908870089771, 0.6603588047247171, 0.6608151995722138,
            0.6612328229852198, 0.6616140717545177, 0.6620030572297076, 0.6623539917300408, 0.6626959754627264, 0.6630223332045908,
            0.6633360054645671, 0.6636243283748828, 0.6639105168758841, 0.6641720839075258, 0.664434153066093, 0.6646879048074016,
            0.6649254820008966, 0.6651534642632377, 0.6653857164019107, 0.6655749803090755, 0.6657801861663875, 0.6659788048283622,
            0.6661560720144832, 0.6663297834046026, 0.666492997774477, 0.66667768027542, 0.6668167805264079, 0.6669936882784248,
            0.6671333902749049, 0.6672768469804923, 0.6674118209231669, 0.6675329032333017, 0.6676705801665649, 0.6677988084612649,
            0.6679113433053215, 0.6680284336199781, 0.6681499690725486, 0.6682525518350259, 0.6683567067565843, 0.668460965004546,
            0.6685662390024206, 0.6686511224106276, 0.6687586776357963, 0.6688316676951251, 0.6689284932354674, 0.6690095175560199,
            0.6690950890783779, 0.6691790078669322, 0.6692461369136855, 0.6693343233247978, 0.6694005551533061, 0.6694801807393673,
            0.6695488689419441, 0.6696179041146787, 0.669682207645742, 0.6697388884954646, 0.6698006816087986, 0.6698773600892196,
            0.6699283460577496, 0.6699865494232141, 0.6700459021371715, 0.6700932244841693, 0.6701564319389123, 0.6702090710385918,
            0.6702581431297143, 0.6703089257542638, 0.6703600426491966, 0.6704145194361312, 0.6704554666719077, 0.6704917442933176,
            0.6705506553462088, 0.6705950233298209, 0.6706268391507145, 0.670683579816257
        };

        public static double GetScaleFactor(int n)
        {
            double inverseFactor = n < InverseFactors.Length - 1 
                ? InverseFactors[n] 
                : 0.674489750196082 * (1 - 0.5 / n + 6.5 / n / n);
            return 1.0 / inverseFactor;
        }

        protected override double GetScaleFactor(Sample sample)
        {
            return GetScaleFactor(sample.Count);
        }
    }
}